syntax = "proto3";

package message;

service Node {
    rpc SendMessage (NodeMessage) returns (NodeResponse);
}

// message RequestEnvelope {
//     string message_id = 1;
//     uint32 sender = 2;
//     uint32 recipient = 3;
//     Message message = 4;
// }

message NodeResponse {
    // string message_id = 1;
    // uint32 recipient = 2;
}

enum MessageType {
    STORAGE = 0;
    ROLE_CONSENSUS = 1;
}

message NodeMessage {
    MessageType type = 1;
    oneof message {
        StorageMessage storage = 2;
        RoleConsensusMessage role_consensus = 3;
    }
}

message RoleConsensusMessage {
    RoleConsensusCommand command = 1;
}

message RoleConsensusCommand {
    oneof command {
        VoteCommand vote = 1;
        HeartbeatCommand heartbeat = 2;
        RequestVoteCommand request_vote = 3;
    }
}

message VoteCommand {
    uint32 term = 1;
    uint32 voter = 2;
    uint32 votee = 3;
}

message HeartbeatCommand {
    uint32 term = 1;
    uint32 sender = 2;
    uint32 receiver = 3;
}

message RequestVoteCommand {
    uint32 term = 1;
    uint32 requester = 2;
    uint32 requestee = 3;
}


message StorageMessage {
    oneof message {
        StorageCommand command = 1;
        StorageQuery query = 2;
    }
}

message StorageCommand {
    oneof command {
        WriteCommand write = 1;
        WriteReplicaCommand write_replica = 2;
    }
}

message WriteCommand {
    string key = 1;
    string value = 2;
}

message WriteReplicaCommand {
    uint64 position = 1;
    uint32 follower = 2;
    string key = 3;
    string value = 4;
}

message StorageQuery {
    ReadQuery read = 1;
}

message ReadQuery {
    string key = 1;
}